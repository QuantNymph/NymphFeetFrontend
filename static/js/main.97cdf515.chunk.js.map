{"version":3,"sources":["components/Owned.js","components/Analytics.js","components/App.js","reportWebVitals.js","index.js"],"names":["Arbibot","tokenId","owner","contract","this","a","storedURL","window","localStorage","getItem","image","tokenURI","setItem","Owned","connection","useState","isLoading","setLoading","ownedBots","setOwnedBots","fetchData","provider","getSigner","getAddress","address","balanceOf","owned","toNumber","toFetch","i","push","tokenOfOwnerByIndex","Promise","all","ownedIds","arbiBots","map","id","b","fetch","useEffect","fetcherCallback","on","load","off","className","src","concat","Analytics","log","setLog","loading","filters","Mint","queryFilter","reverse","l","args","href","transactionHash","target","utils","formatEther","price","substring","CONTRACT_ADDRESS","MINT_TAB","OWNED_TAB","ANALYTICS_TAB","App","isConnected","setConnected","ethConnected","setEthConnected","setConnection","mintPrice","totalSupply","supplyLimit","nextPoolUnlockLimit","mintable","state","setState","currentTab","setCurrentTab","MAX_FEET","getBalance","TOTAL_REWARD_POOLS","totalPools","rewardPoolSlot","div","add","mul","mint","signer","connect","value","send","chainId","console","error","web3","ethers","providers","Web3Provider","ethereum","location","reload","getNetwork","Contract","abi","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97cdf515.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nclass Arbibot {\n  constructor(tokenId, owner, contract) {\n    this.tokenId = tokenId;\n    this.owner = owner;\n    this.contract = contract;\n  }\n\n  async fetch() {\n    const storedURL = window.localStorage.getItem(`bot-${this.tokenId}`);\n    if (storedURL !== null) {\n      this.image = storedURL;\n      return;\n    }\n    const tokenURI = await this.contract.tokenURI(this.tokenId);\n    \n    window.localStorage.setItem(`bot-${this.tokenId}`, tokenURI);\n    this.image = tokenURI;\n  }\n}\n\nfunction Owned({connection}) {\n  const [isLoading, setLoading] = useState(true);\n  const [ownedBots, setOwnedBots] = useState([]);\n\n  useEffect(() => {\n    const fetcherCallback = () => {\n      fetchData(connection);\n    };\n    async function load() {\n      connection.contract.on(\"Transfer\", fetcherCallback);\n      fetchData(connection);\n    }\n    load();\n    return () => {\n      connection.contract.off(\"Transfer\", fetcherCallback);\n    };\n  }, [connection]);\n\n  async function fetchData({contract, provider}) {\n    const address = await provider.getSigner(0).getAddress();\n    const owned = (await contract.balanceOf(address)).toNumber();\n    \n    let toFetch = [];\n    for (let i = 0; i < owned; i++) {\n      toFetch.push(contract.tokenOfOwnerByIndex(address, i));\n    }\n    const ownedIds = await Promise.all(toFetch);\n    const arbiBots = ownedIds.map(id => new Arbibot(id.toNumber(), address, contract));\n    await Promise.all(arbiBots.map(b => b.fetch()));\n    setOwnedBots(arbiBots);\n\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <h1>Your gallery!!</h1>\n\n      <br />\n\n      {isLoading && <p>Loading owned feet pics... <br /> (rendering might take a while depending on your RPC)</p>}\n      {!isLoading && <div id=\"gallery\">\n        {ownedBots.map(b => (\n          <div className=\"arbibot\" key={b.tokenId}>            \n            <img src={\"https://ipfs.io\".concat(b.image)}></img> \n            <p>Feet Pic #{b.tokenId}</p>\n          </div>\n        ))}\n      </div>}\n    </>\n  );\n}\n\nexport default Owned;","import { useEffect, useState } from \"react\";\nimport {utils} from 'ethers';\n\nfunction Analytics({connection}) {\n    const [log, setLog] = useState([]);\n    const [redemptions, setRedemptions] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetcherCallback = () => {\n            fetchData(connection);\n        };\n        async function load() {\n            connection.contract.on(\"Mint\", fetcherCallback);            \n            fetchData(connection);\n        }\n        load();\n        return () => {\n            connection.contract.off(\"Mint\", fetcherCallback);            \n        };\n    }, [connection]);\n\n    async function fetchData(connection) {\n        const [log, redemptions] = await Promise.all([\n            connection.contract.queryFilter(await connection.contract.filters.Mint(), -50000),            \n        ]);\n        setLog(log.reverse());        \n        setLoading(false);\n    }\n\n    return (<>\n        <h1>NymphFeet Analytics!!</h1>\n        {loading && <p>Loading...</p>}\n        {!loading && <>\n            <p><u>Recent mints:</u></p>\n\n            <ul>\n                {log.map(l => <li key={l.transactionHash}>\n                    Feet #{l.args.tokenId.toNumber()} for <a href={`https://etherscan.io/tx/${l.transactionHash}`} target=\"_blank\">{utils.formatEther(l.args.price)} ETH</a> by {l.args.owner.substring(0, 7)}\n                </li>)}\n            </ul>\n\n            \n        </>}\n    </>);\n}\n\nexport default Analytics;","import React, { useEffect, useState } from 'react';\nimport {ethers, utils} from 'ethers';\nimport abi from '../abi/NymphFeet.json';\nimport Owned from './Owned';\n// import Rewards from './Rewards';\nimport Analytics from './Analytics';\n// import Cases from './Cases';\n\nconst CONTRACT_ADDRESS = '0x502f880a30599709fCfB81C788F548d32b7596d0';\nconst CORRECT_CHAIN_ID = 1; // 1337 (local) or 42161 (arbi) or 421611 (arbi test)\nconst CORRECT_CHAIN_HEX = '0x1'; // 0x539 (local) or 0xA4B1 (arbi) or 0x66EEB (arbi-test)\n\nconst MINT_TAB = 'MINT_TAB';\nconst OWNED_TAB = 'OWNED_TAB';\n// const REWARDS_TAB = 'REWARDS_TAB';\nconst ANALYTICS_TAB = 'ANALYTICS_TAB';\n// const CASES_TAB = 'CASES_TAB';\n\nconst LAUNCHED = true;\n\nfunction App() {\n  const [isConnected, setConnected] = useState(false);\n  const [ethConnected, setEthConnected] = useState(false);\n\n  const [connection, setConnection] = useState(null);\n  const [state, setState] = useState({\n    mintPrice: '...',\n    totalSupply: '...',\n    supplyLimit: '...',    \n    nextPoolUnlockLimit: '...',\n    mintable: true,\n  });\n\n  const [currentTab, setCurrentTab] = useState(MINT_TAB);\n\n  useEffect(() => {\n    async function load() {\n      if (!LAUNCHED) {\n        return;\n      }\n\n      if (typeof web3 === 'undefined') {\n        return; // not connected, default to unconnected state\n      }\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []);\n      setConnected(true);\n\n      // nasty hack, thanks neso\n      provider.provider.on(\"accountsChanged\", async () => {\n        window.location.reload();\n      });\n      provider.provider.on(\"chainChanged\", async () => {\n        window.location.reload();\n      });\n\n      const network = await provider.getNetwork();\n      if (network.chainId !== CORRECT_CHAIN_ID) {\n        setConnection({provider});\n        return;\n      }\n      setEthConnected(true);\n\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, abi, provider).connect(provider.getSigner());      \n      setConnection({contract, provider});\n\n      contract.on(\"Mint\", () => {\n        fetchData({contract, provider});\n      });\n      provider.on(\"block\", () => {\n        fetchData({contract, provider});\n      });\n\n      fetchData({contract, provider});\n    }\n    load();\n  }, []);\n\n  async function fetchData({contract, provider}) {\n    const [mintPrice, totalSupply, supplyLimit, contractBalance, totalPools] = await Promise.all([\n      contract.mintPrice(), contract.totalSupply(), contract.MAX_FEET(), provider.getBalance(contract.address), contract.TOTAL_REWARD_POOLS()\n    ]);\n\n    const rewardPoolSlot = totalSupply.div(supplyLimit.div(totalPools));\n\n    setState({\n      ...state,\n      mintPrice: utils.formatEther(mintPrice),\n      totalSupply: totalSupply.toNumber(),\n      supplyLimit: supplyLimit.toNumber(),      \n      nextPoolUnlockLimit: rewardPoolSlot.add(1).mul(supplyLimit.div(totalPools)).toNumber(),\n      mintable: totalSupply.toNumber() !== supplyLimit.toNumber()\n    });\n  }\n\n  async function mint() {\n    const signer = connection.contract.connect(connection.provider.getSigner(0));\n    const price = await connection.contract.mintPrice();\n    await signer.mint({value: price});\n  }\n\n  // thanks again neso for the scuffed code\n  async function switchNetworks() {\n    try {\n      await connection.provider.send('wallet_switchEthereumChain', [{chainId: CORRECT_CHAIN_HEX}]);\n    } catch (switchError) {\n      console.error(switchError);\n    }\n  }\n\n  return (\n    <div id=\"wrapper\">\n      <div className=\"content\">\n        {currentTab === MINT_TAB && <>\n          <h1>NymphFeet!!</h1>\n          <p className=\"tagline\">100 Nymph Feet pics, for the simps</p>\n\n          <p>\n            All Nymph, all the time <br />\n            Hosted on ipfs.\n          </p>\n\n          <p>\n            Will be used in experiments with token-gated fan club structure <br />\n            Members of the fan club will receive airdrops and free mints from future personal projects <br />\n            Now's your chance to get some long Nymph exposure!\n          </p>\n\n          <p>\n            6 hour dutch auction from 20 ETH to .01 ETH! <br />\n            Resets after each pool unlocks!\n          </p>          \n\n          <hr />\n\n          {!LAUNCHED && <p><u>Launching soon!</u></p>}\n\n          {LAUNCHED && !isConnected && <button disabled>Connecting...</button>}\n\n          {isConnected && !ethConnected && <>\n            <p>\n              Non-eth network detected.<br />\n              <u>This project requires you to connect to Eth mainnet!</u>\n            </p>\n            <button onClick={switchNetworks}>Connect!!</button>            \n          </>}\n\n          {isConnected && ethConnected && <>\n            {state.mintable && <>\n              <button onClick={mint}>Mint!!!</button>\n              <p>\n                Current price: <u>{state.mintPrice} ETH</u> <br />\n                Mint progress to next pool unlock: <u>{state.totalSupply}/{state.nextPoolUnlockLimit}</u>\n              </p>\n              <p>                \n                Current feet: <u>{state.totalSupply}/{state.supplyLimit}</u>\n              </p>\n            </>}\n            {!state.mintable && <button disabled={true} onClick={mint}>All feet minted!!</button>}\n          </>}          \n        </>}\n\n        {currentTab === OWNED_TAB && <Owned connection={connection} />}        \n        {currentTab === ANALYTICS_TAB && <Analytics connection={connection} />}        \n\n        {isConnected && ethConnected && <>\n          <hr />\n          <p>\n            [ <a onClick={() => setCurrentTab(MINT_TAB)}>mint</a> | <a onClick={() => setCurrentTab(OWNED_TAB)}>owned</a> | <a onClick={() => setCurrentTab(ANALYTICS_TAB)}>analytics</a> ]\n          </p>\n        </>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}